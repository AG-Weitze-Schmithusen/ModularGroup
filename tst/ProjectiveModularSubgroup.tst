gap> G := ProjectiveModularSubgroup((1,2)(3,4)(5,6)(7,8)(9,10), (1,4)(2,5,9,10,8)(3,7,6));
<projective modular subgroup of index 10>
gap> IsCongruenceSubgroup(G);
false
gap> Cusps(G);
[ infinity, 0, 1 ]
gap> CuspWidth(infinity, G);
2
gap> CuspWidth(1, G);
3
gap> CuspWidth(0, G);
5
gap> GeneralizedLevel(G);
30
gap> Deficiency(G, 30);
10
gap> RightCosetRepresentatives(G);
[ <identity ...>, S, T, S*T, S*T^-1, T*S, S*T*S, S*T^2, S*T^-1*S, S*T^-2 ]
gap> G := ProjectiveModularSubgroup((1,2)(3,7)(4,9)(5,11)(6,13)(8,16)(10,19)(12,21)(14,24)(15,26)(17,28)(18,29)(20,32)(22,35)(23,36)(25,38)(27,40)(30,44)(31,42)(33,48)(34,50)(37,54)(39,53)(41,58)(43,60)(45,61)(46,63)(47,65)(49,68)(51,71)(52,56)(55,75)(57,78)(59,81)(62,83)(64,85)(66,86)(67,87)(69,89)(70,90)(72,93)(73,80)(74,96)(76,99)(77,101)(79,103)(82,106)(84,108)(88,111)(91,115)(92,110)(94,119)(95,121)(97,124)(98,125)(100,127)(102,128)(104,130)(105,117)(107,113)(109,134)(112,131)(114,135)(116,137)(118,138)(120,129)(122,139)(123,140)(126,142)(132,141)(133,143)(136,144), (1,3,8,17,10,4)(2,5,12,22,25,14,6)(7,13,23,15)(9,18,30,45,62,69,49,33,20,11)(16,26,39,41,27)(19,31,46,64,61,43,29)(21,32,47,66,51,34)(24,37,55,76,100,115,135,122,95,73,53,36)(28,40,57,79,104,109,84,63,81,82,59,42)(35,50,70,91,116,130,120,94,72,52)(38,56,77,97,74,54)(44,60)(48,67,65)(58,80,105,131,140,124,138,119,102,78)(68,88,112,110,86,87)(71,92,117,121,136,114,90)(75,96,123,111,89,113,98)(83,85,108,133,132,107)(93,118,101)(99,125,141,126)(103,128,129)(127,142,143,134,137)(139,144));;
gap> Index(G);
144
gap> IsCongruence(G);
false
gap> Cusps(G);
[ infinity, 0, 1, -1, 2, -2, -1/2, 1/2, 3, -1/3, 1/3, -3/2, -2/3, 5/2, -3/4, -2/5, 2/5, -5/4, -2/7, 3/7, 8/3, 10/3, 4/9, 5/9 ]
gap> RightCosetRepresentatives(G);
[ <identity ...>, S, T, T^-1, S*T, S*T^-1, T*S, T^2, T^-1*S, T^-2, S*T*S, S*T^2, S*T^-1*S, S*T^-2, T*S*T^-1, T^2*S, T^3, T^-1*S*T, T^-2*S,
  S*T*S*T^-1, S*T^2*S, S*T^3, S*T^-1*S*T, S*T^-2*S, S*T^-3, T*S*T^-1*S, T^2*S*T^-1, T^3*S, T^-1*S*T*S, T^-1*S*T^2, T^-2*S*T, S*T*S*T^-1*S,
  S*T*S*T^-2, S*T^2*S*T^-1, S*T^3*S, S*T^-1*S*T*S, S*T^-2*S*T, S*T^-3*S, T*S*T^-1*S*T, T^2*S*T^-1*S, T^2*S*T^-2, T^3*S*T^-1, T^-1*S*T*S*T^-1,
  T^-1*S*T^2*S, T^-1*S*T^3, T^-2*S*T^2, S*T*S*T^-1*S*T, S*T*S*T^-2*S, S*T*S*T^-3, S*T^2*S*T^-1*S, S*T^2*S*T^-2, S*T^3*S*T^-1, S*T^-1*S*T*S*T^-1,
  S*T^-2*S*T*S, S*T^-2*S*T^2, S*T^-3*S*T, T^2*S*T^-1*S*T, T^2*S*T^-2*S, T^3*S*T^-2, T^-1*S*T*S*T^-1*S, T^-1*S*T*S*T^-2, T^-1*S*T^4, T^-2*S*T^2*S,
  T^-2*S*T^3, S*T*S*T^-1*S*T*S, S*T*S*T^-1*S*T^2, S*T*S*T^-2*S*T, S*T*S*T^-3*S, S*T*S*T^-4, S*T^2*S*T^-1*S*T, S*T^2*S*T^-2*S, S*T^3*S*T^-2,
  S*T^-1*S*T*S*T^-2, S*T^-2*S*T*S*T^-1, S*T^-2*S*T^2*S, S*T^-2*S*T^3, S*T^-3*S*T^2, T^2*S*T^-1*S*T*S, T^2*S*T^-1*S*T^2, T^2*S*T^-2*S*T,
  T^3*S*T^-2*S, T^3*S*T^-3, T^-1*S*T^4*S, T^-2*S*T^2*S*T^-1, T^-2*S*T^3*S, S*T*S*T^-1*S*T^2*S, S*T*S*T^-2*S*T*S, S*T*S*T^-3*S*T, S*T*S*T^-4*S,
  S*T^2*S*T^-1*S*T*S, S*T^2*S*T^-1*S*T^2, S*T^2*S*T^-2*S*T, S*T^3*S*T^-2*S, S*T^3*S*T^-3, S*T^-1*S*T*S*T^-3, S*T^-2*S*T*S*T^-1*S,
  S*T^-2*S*T*S*T^-2, S*T^-2*S*T^2*S*T^-1, S*T^-2*S*T^3*S, S*T^-2*S*T^4, S*T^-3*S*T^2*S, T^2*S*T^-1*S*T*S*T^-1, T^2*S*T^-1*S*T^2*S,
  T^2*S*T^-1*S*T^3, T^2*S*T^-2*S*T^2, T^3*S*T^-3*S, T^-1*S*T^4*S*T^-1, T^-2*S*T^2*S*T^-1*S, T^-2*S*T^2*S*T^-2, S*T*S*T^-1*S*T^2*S*T^-1,
  S*T*S*T^-3*S*T*S, S*T*S*T^-3*S*T^2, S*T*S*T^-4*S*T, S*T^2*S*T^-1*S*T*S*T^-1, S*T^2*S*T^-1*S*T^2*S, S*T^2*S*T^-1*S*T^3, S*T^2*S*T^-2*S*T^2,
  S*T^3*S*T^-2*S*T, S*T^3*S*T^-3*S, S*T^3*S*T^-4, S*T^-1*S*T*S*T^-3*S, S*T^-1*S*T*S*T^-4, S*T^-2*S*T*S*T^-1*S*T, S*T^-2*S*T*S*T^-2*S,
  S*T^-2*S*T^2*S*T^-1*S, S*T^-2*S*T^3*S*T^-1, S*T^-2*S*T^4*S, T*(T*S*T^-1*S)^2, T^2*S*T^-1*S*T^2*S*T^-1, T^2*S*T^-1*S*T^3*S, T^2*S*T^-2*S*T^3,
  T^-1*S*T^4*S*T^-2, T^-2*S*T^2*S*T^-1*S*T, T^-2*S*T^2*S*T^-2*S, S*T*(T*S*T^-1*S)^2, S*T^2*S*T^-1*S*T*S*T^-2, S*T^2*S*T^-1*S*T^3*S,
  S*T^3*S*T^-2*S*T*S, S*T^-1*S*T*S*T^-4*S, S*T^-1*(T^-1*S*T*S)^2, S*T^-2*S*T^2*S*T^-1*S*T, S*T^-2*S*T^3*S*T^-1*S, T^-2*S*T^2*S*T^-1*S*T*S,
  S*T^2*S*T^-1*S*T*S*T^-2*S ]
gap> GeneralizedLevel(G);
420
gap> GeneratorsOfGroup(G);
[ T^-6, T*S*T^-3*S^-1*T*S^-1, S*T^7*S^-1, T*S*T^-1*S*T^4*S^-1*T^-2, T^-1*S*T^2*S*T^-1*S^-1*T*S^-1*T^-1*S^-1*T, S*T^2*S*T^-5*S^-1*T*S^-1*T^-1*S^-1,
  T^-1*S*T*S*T^-6*S^-1*T^2, T^-1*S*T^9*S^-1*T^-1*S^-1, (S*T*S*T^-1)^2*T^-1*S^-1*T^2*S^-1*T^-1*S^-1, S*T^-3*S*T^5*S^-1*T^-1*S^-1*T^2*S^-1,
  T^3*S*T^-2*S*T^4*S^-1*T^-3, S*T^-2*S*T^2*S*T^-3*S^-1*T^4*S^-1*T^-1*S^-1, S*T^-2*S*T^4*(T*S^-1*T^-2*S^-1)^2,
  S*T^-3*S*T^2*S*T^-2*S^-1*T^2*S^-1*T^-3*S^-1, T^2*S*T^-1*S*T*S*T^-2*S^-1*T^3*S^-1*T^-3*S^-1, T^2*S*T^-1*S*T^6*S^-1*T^-2*S^-1*T^2,
  T^2*S*T^-2*S*T^2*S*T^-2*S^-1*T^2*S^-1*T^-2*S^-1, S*T*S*T^-1*S*T^2*S*T^-4*S^-1*T^3*S^-1*T^-1*S^-1,
  S*T*S*T^-3*S*T*S*T^-2*S^-1*T*S^-1*T^-1*S^-1*T^2*S^-1, S*T^2*S*T^-1*S*T^4*S^-1*T^-3*S^-1*T*S^-1*T^-2, S*T^3*S*T^-4*S*T*S^-1*T^-2*S^-1*T*S^-1*T^-2,
  S*T^-1*S*T*S*T^-3*S*T^3*S^-1*T^-1*S^-1*T*S^-1*T^-2*S^-1, S*T^-1*S*T*S*T^-4*(T^-1*S^-1*T*S^-1)^2*T^-2*S^-1,
  S*T^-2*S*T^3*S*T^-3*S^-1*T*S^-1*T^-2*S^-1*T^2*S^-1, T^-1*S*T^4*S*T^-4*S^-1*T*S^-1*T^-2*S^-1*T^2 ]
gap> SAction(G);
(1,2)(3,7)(4,9)(5,11)(6,13)(8,16)(10,19)(12,21)(14,24)(15,26)(17,28)(18,29)(20,32)(22,35)(23,36)(25,38)(27,40)(30,44)(31,42)(33,48)(34,50)(37,
54)(39,53)(41,58)(43,60)(45,61)(46,63)(47,65)(49,68)(51,71)(52,56)(55,75)(57,78)(59,81)(62,83)(64,85)(66,86)(67,87)(69,89)(70,90)(72,93)(73,80)(74,
96)(76,99)(77,101)(79,103)(82,106)(84,108)(88,111)(91,115)(92,110)(94,119)(95,121)(97,124)(98,125)(100,127)(102,128)(104,130)(105,117)(107,
113)(109,134)(112,131)(114,135)(116,137)(118,138)(120,129)(122,139)(123,140)(126,142)(132,141)(133,143)(136,144)
gap> TAction(G);
(1,3,8,17,10,4)(2,5,12,22,25,14,6)(7,13,23,15)(9,18,30,45,62,69,49,33,20,11)(16,26,39,41,27)(19,31,46,64,61,43,29)(21,32,47,66,51,34)(24,37,55,76,
100,115,135,122,95,73,53,36)(28,40,57,79,104,109,84,63,81,82,59,42)(35,50,70,91,116,130,120,94,72,52)(38,56,77,97,74,54)(44,60)(48,67,65)(58,80,
105,131,140,124,138,119,102,78)(68,88,112,110,86,87)(71,92,117,121,136,114,90)(75,96,123,111,89,113,98)(83,85,108,133,132,107)(93,118,101)(99,125,
141,126)(103,128,129)(127,142,143,134,137)(139,144)
gap> for c in Cusps(G) do
> Display(CuspWidth(c,G));
> od;
6
7
4
10
5
7
6
12
12
10
6
2
3
10
6
7
7
6
3
4
3
1
5
2
gap> for c in Cusps(G) do
> Display(CuspsEquivalent(c, infinity, G));
> od;
true
false
false
false
false
false
false
false
false
false
false
false
false
false
false
false
false
false
false
false
false
false
false
false
gap> LiftToSL2ZEven(G);
<modular subgroup of index 144>
gap> LiftToSL2ZOdd(G);
<modular subgroup of index 288>
gap> IndexModN(G, 2);
3
gap> IndexModN(G, 3);
1
