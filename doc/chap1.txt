  
  [1X1 [33X[0;0YThe Modular Group and its subgroups[133X[101X
  
  [33X[0;0YThis  package  contains methods for computing with finite-index subgroups of
  the  modular  group  [23X\mathrm{SL}(2,  \mathbb{Z})[123X  which are given by a coset
  permutation representation with respect to the generators We will call these
  subgroups 'modular subgroups'.[133X
  
  
  [1X1.1 [33X[0;0YConstruction of modular subgroups[133X[101X
  
  [33X[0;0YIn  this section we describe how to construct modular subgroups from a given
  coset  permutation  representation  or from a list of generator matrices and
  some related methods.[133X
  
  [1X1.1-1 ModularSubgroup[101X
  
  [29X[2XModularSubgroup[102X( [3Xs[103X, [3Xt[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Yan object representing a modular subgroup[133X
  
  [33X[0;0YThis  method  constructs  a  modular  subgroup  from  two given permutations
  (provided they describe a coset action).[133X
  
  [1X1.1-2 ModularSubgroup[101X
  
  [29X[2XModularSubgroup[102X( [3Xgens[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Yan object representing a modular subgroup[133X
  
  [33X[0;0YThis is another constructor for a modular subgroup, with the difference that
  it  takes  a  list  of  generator matrices as input and calculates the coset
  graph  of  the generated group. One has to be careful though when using this
  method,  because  no  check  is  performed if the generated group has finite
  index!  Internally,  when  trying  to  calculate  the  coset  graph, we just
  enumerate  all cosets until we are done or some limit fixed is reached. This
  also exposes another weakness of this method: The coset enumeration might be
  very  time-consuming,  so  constructing  modular  subgroups  from  a list of
  generators is not always feasible. On the other hand, the clear advantage of
  constructing a modular subgroup in this way is that it will alreasy know its
  generators. So future computations with this group involving generators will
  most likely be faster.[133X
  
  [1X1.1-3 DefinesCosetAction[101X
  
  [29X[2XDefinesCosetAction[102X( [3Xs[103X, [3Xt[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ytrue or false[133X
  
  [33X[0;0YThis  is an auxiliary method that takes two permutations as input and checks
  if  they describe the action of the generators [23XS[123X and [23XT[123X on the cosets of some
  group.  This check is for example performed in the constructor for a modular
  subgroup.[133X
  
  [1X1.1-4 CosetActionFromGenerators[101X
  
  [29X[2XCosetActionFromGenerators[102X( [3Xgens[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ytwo permutations[133X
  
  [33X[0;0YTakes  a  list  of  generator  matrices and calculates the coset permutation
  representation of the generated subgroup. The same warning as above applies:
  No check is performed if the generated subgroup actually has finite index.[133X
  
  [1X1.1-5 STDecomposition[101X
  
  [29X[2XSTDecomposition[102X( [3XM[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ya word in [23XS[123X and [23XT[123X[133X
  
  [33X[0;0YTakes  a matrix in [23X\mathrm{SL}(2, \mathbb{Z})[123X and decomposes it in a word in
  the generators [23XS[123X and [23XT[123X.[133X
  
  [1X1.1-6 SAction[101X
  
  [29X[2XSAction[102X( [3XG[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ya permutation[133X
  
  [33X[0;0YTakes  a  modular  subgroup  and  returns a permutation corresponding to the
  action of the generator matrix [23XS[123X.[133X
  
  [1X1.1-7 TAction[101X
  
  [29X[2XTAction[102X( [3XG[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ya permutation[133X
  
  [33X[0;0YTakes  a  modular  subgroup  and  returns a permutation corresponding to the
  action of the generator matrix [23XT[123X.[133X
  
  
  [1X1.2 [33X[0;0YComputations with modular subgroups[133X[101X
  
  [33X[0;0YIn  this  section  we  describe  the  implemented  method for computing with
  modular subgroups.[133X
  
  [1X1.2-1 Index[101X
  
  [29X[2XIndex[102X( [3XG[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ya natural number[133X
  
  [33X[0;0YTakes   a   modular   subgroup  and  returns  its  index  in  [23X\mathrm{SL}(2,
  \mathbb{Z})[123X.[133X
  
  [1X1.2-2 IsCongruenceSubgroup[101X
  
  [29X[2XIsCongruenceSubgroup[102X( [3XG[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ytrue or false[133X
  
  [33X[0;0YTests whether a given modular subgroup is a congruence subgroup.[133X
  
  [1X1.2-3 RightCosetRepresentatives[101X
  
  [29X[2XRightCosetRepresentatives[102X( [3XG[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ya list of matrices[133X
  
  [33X[0;0YCalculates  a list of representatives of the right cosets of a given modular
  subgroup.[133X
  
  [1X1.2-4 GeneralizedLevel[101X
  
  [29X[2XGeneralizedLevel[102X( [3XG[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ya natural number[133X
  
  [33X[0;0YComputes  the generalized level (i.e. the lowest common multiple of all cusp
  widths) of a given modular subgroup.[133X
  
  [1X1.2-5 GeneratorsOfGroup[101X
  
  [29X[2XGeneratorsOfGroup[102X( [3XG[103X ) [32X function
  
  [33X[0;0YCalculates  a  list  of  generators  for a given modular subgroup. Note: The
  returned  list might contain redundant generators (or even duplicates). This
  calculation  involves  enumerating  the  cosets of the given group and might
  become very slow for large index.[133X
  
  [1X1.2-6 IsElementOf[101X
  
  [29X[2XIsElementOf[102X( [3XA[103X, [3XG[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ytrue or false[133X
  
  [33X[0;0YThis is a membership test for modular subgroups given by a coset permutation
  representation.[133X
  
  [1X1.2-7 CuspWidth[101X
  
  [29X[2XCuspWidth[102X( [3Xc[103X, [3XG[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ya natural number[133X
  
  [33X[0;0YCalculates the width of [23Xc[123X with respect to a given modular subgroup, i.e. the
  smallest  [23Xk[123X  such  that  [23X\pm  gT^{k}g^{-1}  \in G[123X where [23Xg \in \mathrm{SL}(2,
  \mathbb{Z})[123X such that [23Xg\infty = c[123X.[133X
  
  [1X1.2-8 CuspsEquivalent[101X
  
  [29X[2XCuspsEquivalent[102X( [3Xc1[103X, [3Xc2[103X, [3XG[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ytrue or false[133X
  
  [33X[0;0YChecks if two cusps are equivalent with respect to a given modular subgroup.[133X
  
  [1X1.2-9 Cusps[101X
  
  [29X[2XCusps[102X( [3XG[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ya list of cusps[133X
  
  [33X[0;0YCalculates  a  list  of inequivalent cusp representative for a given modular
  subgroup.[133X
  
  [1X1.2-10 CuspsRedundant[101X
  
  [29X[2XCuspsRedundant[102X( [3XG[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ya list of cusps[133X
  
  [33X[0;0YCalculates a list of cusp representatives for a given modular subgroup. Will
  most  likely  produce  redundant  cusps,  i.e. there will be cusps which are
  equivalent.  This  method has the advantage that it is rather fast, compared
  to  the  one  above though. For example it is used in the calculation of the
  generalized  level,  since  when computing the lcm of the cusp widths, we do
  not care about duplicates.[133X
  
