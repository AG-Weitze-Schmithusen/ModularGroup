<Chapter Label="SL2Z">
<Heading>Subgroups of <M>SL_2(&ZZ;)</M></Heading>

For representing finite-index subgroups of <M>SL_2(&ZZ;)</M>, this package
introduces the new type <C>ModularSubgroup</C>. As stated in the introduction,
a <C>ModularSubgroup</C> essentially consists of the two permutations
<M>\sigma_S</M> and <M>\sigma_T</M> describing the coset graph with respect
to the generator matrices <M>S</M> and <M>T</M> (with the convention that <M>1</M>
corresponds to the identity coset). So explicitly specifying these permutations
is the canonical way to construct a <C>ModularSubgroup</C>. <Br/>
Though you might not always have a coset graph of your subgroup at hand, but
rather a list of generator matrices. Therefore we implement two different
constructors for <C>ModularSubgroup</C>, one that takes as input two permutations
describing the coset graph, and one that takes a list of <M>SL_2(&ZZ;)</M>
matrices as generators.

<Section Label="ModularSubgroupConstr">
<Heading>Construction of modular subgroups</Heading>

<ManSection>

  <Oper Name="ModularSubgroup" Arg="s, t" />
  <Description>
    Constructs a <C>ModularSubgroup</C> object corresponding to the finite-index
    subgroup of <M>SL_2(&ZZ;)</M> described by the permutations <A>s</A> and
    <A>t</A>. <Br/>
    This constructor tests if the given permutations actually describe the
    coset action of the matrices
    <Alt Only="LaTeX">
      <![CDATA[
      \[
            S =
            \left(
               \begin{array}{rr}
                  0 & -1 \\
                  1 & 0
               \end{array}
            \right)
            \quad
            T =
            \left(
               \begin{array}{rr}
                  1 & 1 \\
                  0 & 1
               \end{array}
            \right)
      \]
      ]]>
    </Alt>
    <Alt Only="Text,HTML"><Verb><![CDATA[
                     [ 0 -1 ]           [ 1  1 ]
                 S = [ 1  0 ]       T = [ 0  1 ]
    ]]></Verb></Alt>
    by checking that they act transitively and satisfy the relations
    <Display>s^4 = (s^3 t)^3 = s^2 t s^{-2} t^{-1} = 1</Display>

    <Example>
    <![CDATA[
    gap> G := ModularSubgroup(
    > (1,2)(3,4)(5,6)(7,8)(9,10),
    > (1,4)(2,5,9,10,8)(3,7,6));
    <modular subgroup of index 10>
    ]]>
  </Example>
  </Description>

  <Oper Name="ModularSubgroup" Arg="gens" />
  <Description>
    Constructs a <C>ModularSubgroup</C> object corresponding to the finite-index
    subgroup of <M>SL_2(&ZZ;)</M> generated by the matrices in <A>gens</A>. <Br/>
    No test is performed to check if the generated subgroup actually has finite
    index! <Br/>
    This constructor implicitly computes a coset table of the subgroup. Hence it
    might be slow for very large index subgroups.

    <Example>
    <![CDATA[
    gap> G := ModularSubgroup([
    > [[1,2], [0,1]],
    > [[1,0], [2,1]],
    > [[-1,0], [0,-1]]
    > ]);
    <modular subgroup of index 6>
    ]]>
  </Example>
  </Description>

</ManSection>

</Section>

</Chapter>
